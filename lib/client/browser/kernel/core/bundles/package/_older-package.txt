import type {Beyond} from "../beyond";
import type {Module} from "../modules/module";


/**
 * The bundle internal package
 */
export abstract class BundlePackage {

    readonly #beyond: Beyond;

    // The internal modules code
    #modules: Map<string, any>;

    protected constructor() {
        this.#beyond = <Beyond>(require('../beyond')).beyond;
    }

    #isBeyondDependency = (id: string) => id.startsWith('beyond_modules/') || id.startsWith('beyond_libraries/');
    #getTransversal = (id: string) => {
        const beyond = this.#beyond;
        if (!beyond) return;
        const transversal = id.split('/').pop();
        return beyond.transversals.has(transversal) ? beyond.transversals.get(transversal) : undefined;
    };

    require = (source: string, id: string) => this.#require(source, id);

    #executed = false;

    setModules(modules: Map<string, any>) {
        if (this.#executed) throw new Error('Bundle already executed');
        this.#executed = true;

        this.#modules = modules;
        this.#modules.forEach((fn: any, id) => this.#require(id));
    }

    // Update modules is used by HMR on updates of the code
    updateModules(modules: Map<string, any>) {
        this.#executed = false;
        this.#loaded.clear();
        this.setModules(modules);
        this.setExports();
    }

    export = (x: any): void => void x;
}
