import {Events} from "@beyond-js/kernel/core/ts"
import {Factory} from "./factory";

export abstract class Product extends Events {
    readonly #manager?: Factory<any>
    get manager() {
        return this.#manager
    }

    get table() {
        return this.#manager.table
    }

    // The key generated by CompareObjects.generate(filter, attributes, session)
    readonly #key: string
    get key() {
        return this.#key
    }

    // The auto-numeric instance id generated by the manager
    readonly #instanceId
    get instanceId() {
        return this.#instanceId
    }

    readonly #session?: string
    get session() {
        return this.#session
    }

    hold(): void {
        this.#manager.hold(this.#instanceId)
    }

    release(): void {
        this.#manager.release(this.#instanceId)
    }

    abstract get loaded(): boolean

    abstract get fetched(): boolean

    abstract get fetching(): boolean

    get landed() {
        return this.loaded || this.fetched
    }

    abstract load(): void

    abstract fetch(): void

    /**
     * Product Constructor
     * @param {Factory<*>} manager The manager of the product (instance of a factory)
     * @param {string} key The key generated by CompareObjects.generate(filter, attributes, session)
     * @param {number} instanceId The auto-numeric instance id generated by the manager
     * @param {string} session The session name
     * @protected
     */
    protected constructor(manager: Factory<any>, key: string, instanceId: number, session: string) {
        super();
        this.#manager = manager;
        this.#key = key;
        this.#instanceId = instanceId;
        this.#session = session;
    }
}
