import {SingleCall} from "@beyond-js/kernel/core/ts";
import {Product} from "../factory/product";
import type {ListsManager} from "./manager/manager";
import {FilterSpecs, Filter} from "../filter/filter";
import {ListFetch} from "./fetch";
import {ListLocalStore} from "./local-store";
import {ListRecords} from "./records";
import {Order, OrderSpecs} from "./order";

export type ListAttributes = Record<string, any>

export class ListData extends Product {
    readonly #filter: Filter
    get filter() {
        return this.#filter
    }

    readonly #order: Order
    get order() {
        return this.#order
    }

    readonly #attributes: ListAttributes
    get attributes() {
        return this.#attributes
    }

    #invalidated = false;

    // For realtime notifications to indicate that the list has changed
    invalidate() {
        this.#invalidated = true;
        this.trigger('invalidated');
    }

    readonly #records = new ListRecords(this);
    get records() {
        return this.#records
    }

    // The local store, properties and methods
    #localStore = new ListLocalStore(this)
    get localStore() {
        return this.#localStore;
    }

    get loaded() {
        return this.#localStore.loaded;
    }

    @SingleCall
    async load() {
        let stored: (string | number)[];
        try {
            stored = await this.#localStore.load();
        } catch (exc) {
            console.error(`Error loading list from cache`, exc.stack);
            return;
        }

        if (stored === undefined) return;

        if (!(stored instanceof Array)) {
            console.warn('Invalid list data cache', this);
        } else {
            stored && this.#records.overwrite(stored);
            this.trigger('change');
            this.trigger('updated');
        }
    }

    // The fetch manager, properties and methods
    readonly #fetch = new ListFetch(this);

    get fetching() {
        return this.#fetch.fetching
    }

    get fetched() {
        return this.#fetch.fetched
    }

    async fetch() {
        await this.#fetch.fetch()
    }

    /**
     * ListData Constructor
     * @param {ListsManager} manager The manager of the list (instance of a factory)
     * @param {string} key The key generated by CompareObjects.generate(filter, attributes, session)
     * @param {number} instanceId The auto-numeric instance id generated by the manager
     * @param {FilterSpecs} filterSpecs The filter specification
     * @param {OrderSpecs} orderSpecs The order specification
     * @param {ListAttributes} attributes The attributes of the list
     * @param {string} session The session name
     */
    constructor(manager: ListsManager, key: string, instanceId: number,
                filterSpecs: FilterSpecs, orderSpecs: OrderSpecs, attributes: ListAttributes, session: string) {
        super(manager, key, instanceId, session);
        this.#filter = new Filter(this.table, filterSpecs);
        this.#order = new Order(this.table, orderSpecs);
        this.#attributes = attributes;
    }

    destroy() {
        this.#records.destroy();
    }
}
