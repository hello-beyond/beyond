/************
 Processor: ts
 ************/

import * as dependency_0 from '@beyond-js/kernel/core/ts';

// FILE: application-styles.d.ts
declare namespace ns_applicationstyles {
}

// FILE: local.d.ts
declare namespace ns_local {
    import Events = dependency_0.Events;

    class BeyondLocal extends Events {
        #private;

        get services(): {
            clear(): void;
            delete(key: string): boolean;
            forEach(callbackfn: (value: ns_services_service.ManagedService, key: string, map: Map<string, ns_services_service.ManagedService>) => void, thisArg?: any): void;
            get(key: string): ns_services_service.ManagedService;
            has(key: string): boolean;
            set(key: string, value: ns_services_service.ManagedService): any;
            readonly size: number;
            entries(): IterableIterator<[
                string,
                ns_services_service.ManagedService
            ]>;
            keys(): IterableIterator<string>;
            values(): IterableIterator<ns_services_service.ManagedService>;
            [Symbol.iterator](): IterableIterator<[
                string,
                ns_services_service.ManagedService
            ]>;
            readonly [Symbol.toStringTag]: string;
        };

        constructor();
    }

    const local: BeyondLocal;
}

// FILE: services\service.d.ts
declare namespace ns_services_service {
    import Events = dependency_0.Events;
    import ns_service_service = dependency_0.ns_service_service;
    import Service = ns_service_service.Service;

    class ManagedService extends Events {
        #private;

        constructor(service: Service);

        get status(): Promise<string>;

        start(): Promise<void>;

        stop(): Promise<void>;
    }
}

// FILE: services\services.d.ts
declare namespace ns_services_services {
    import ManagedService = ns_services_service.ManagedService;
    const services: {
        clear(): void;
        delete(key: string): boolean;
        forEach(callbackfn: (value: ManagedService, key: string, map: Map<string, ManagedService>) => void, thisArg?: any): void;
        get(key: string): ManagedService;
        has(key: string): boolean;
        set(key: string, value: ManagedService): any;
        readonly size: number;
        entries(): IterableIterator<[
            string,
            ManagedService
        ]>;
        keys(): IterableIterator<string>;
        values(): IterableIterator<ManagedService>;
        [Symbol.iterator](): IterableIterator<[
            string,
            ManagedService
        ]>;
        readonly [Symbol.toStringTag]: string;
    };
}

export import local = ns_local.local;
export import services = ns_services_services.services;


